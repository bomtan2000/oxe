// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Data.Authentication.EFCore.Models;

namespace Data.Authentication.EFCore.DB
{
    public partial class SSODBContext : DbContext
    {
        public SSODBContext()
        {
        }

        public SSODBContext(DbContextOptions<SSODBContext> options)
            : base(options)
        {
            AppContext.SetSwitch("Npgsql.EnableLegacyTimestampBehavior", true);
            AppContext.SetSwitch("Npgsql.DisableDateTimeInfinityConversions", true);
        }

        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<GlobalConfiguration> GlobalConfiguration { get; set; }
        public virtual DbSet<GroupPermission> GroupPermission { get; set; }
        public virtual DbSet<Groups> Groups { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<Page> Page { get; set; }
        public virtual DbSet<Platform> Platform { get; set; }
        public virtual DbSet<RefreshToken> RefreshToken { get; set; }
        public virtual DbSet<StdCodes> StdCodes { get; set; }
        public virtual DbSet<Systems> Systems { get; set; }
        public virtual DbSet<User2Company> User2Company { get; set; }
        public virtual DbSet<User2Group> User2Group { get; set; }
        public virtual DbSet<UserDetail> UserDetail { get; set; }
        public virtual DbSet<UserLogin> UserLogin { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Database=SSO;Persist Security Info=True;Password=MPL33!tstb;Username=adminmpl;Host=192.168.70.77");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Company>(entity =>
            {
                entity.ToTable("Company", "AUTH");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Addr).HasMaxLength(200);

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.CompanyStatus).HasMaxLength(50);

                entity.Property(e => e.ContactEmail).HasMaxLength(50);

                entity.Property(e => e.ContactPerson).HasMaxLength(500);

                entity.Property(e => e.Country)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.CreateDate)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.Currency).HasMaxLength(10);

                entity.Property(e => e.IsValid)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("1");

                entity.Property(e => e.PostalCode).HasMaxLength(10);

                entity.Property(e => e.Remark).HasMaxLength(8000);

                entity.Property(e => e.ShortCode).HasMaxLength(50);

                entity.Property(e => e.UpdateDate).HasColumnType("timestamp(0) without time zone");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country", "AUTH");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.CountryCode3).HasMaxLength(3);

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GlobalConfiguration>(entity =>
            {
                entity.ToTable("GlobalConfiguration", "AUTH");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Module).HasMaxLength(20);

                entity.Property(e => e.NameSetting).HasMaxLength(2000);

                entity.Property(e => e.TypeValue).HasMaxLength(20);
            });

            modelBuilder.Entity<GroupPermission>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.SystemCode, e.PageCode })
                    .HasName("grouppermission_pkey");

                entity.ToTable("GroupPermission", "AUTH");

                entity.Property(e => e.GroupId).HasColumnName("Group_Id");

                entity.Property(e => e.SystemCode).HasMaxLength(10);

                entity.Property(e => e.PageCode).HasMaxLength(20);

                entity.Property(e => e.Del).HasMaxLength(1);

                entity.Property(e => e.Export).HasMaxLength(1);

                entity.Property(e => e.New).HasMaxLength(1);

                entity.Property(e => e.Plan).HasMaxLength(1);

                entity.Property(e => e.Preview).HasMaxLength(1);

                entity.Property(e => e.Run).HasMaxLength(1);

                entity.Property(e => e.Search).HasMaxLength(1);

                entity.Property(e => e.Store).HasMaxLength(1);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.GroupPermission)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("grouppermission_group_id_fkey");
            });

            modelBuilder.Entity<Groups>(entity =>
            {
                entity.ToTable("Groups", "AUTH");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.CreateDate)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.GroupName).HasMaxLength(200);

                entity.Property(e => e.IsValid)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Notes).HasMaxLength(1000);

                entity.Property(e => e.UpdateDate).HasColumnType("timestamp(0) without time zone");
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.HasKey(e => e.MenuCode)
                    .HasName("_menu_pkey");

                entity.ToTable("Menu", "AUTH");

                entity.Property(e => e.MenuCode).HasMaxLength(10);

                entity.Property(e => e.Icon).HasMaxLength(500);

                entity.Property(e => e.IsGroup).HasMaxLength(1);

                entity.Property(e => e.MenuName).HasMaxLength(50);

                entity.Property(e => e.PageCode).HasMaxLength(20);

                entity.Property(e => e.ParentMenu).HasMaxLength(10);

                entity.Property(e => e.SystemCode).HasMaxLength(10);
            });

            modelBuilder.Entity<Page>(entity =>
            {
                entity.HasKey(e => new { e.PageCode, e.SystemCode })
                    .HasName("_page_pkey");

                entity.ToTable("Page", "AUTH");

                entity.Property(e => e.PageCode).HasMaxLength(20);

                entity.Property(e => e.SystemCode).HasMaxLength(10);

                entity.Property(e => e.Del).HasMaxLength(1);

                entity.Property(e => e.Export).HasMaxLength(1);

                entity.Property(e => e.IsValid)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("1");

                entity.Property(e => e.New).HasMaxLength(1);

                entity.Property(e => e.PageDesc)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Plan).HasMaxLength(1);

                entity.Property(e => e.Preview).HasMaxLength(1);

                entity.Property(e => e.Run).HasMaxLength(1);

                entity.Property(e => e.Search).HasMaxLength(1);

                entity.Property(e => e.Store).HasMaxLength(1);
            });

            modelBuilder.Entity<Platform>(entity =>
            {
                entity.HasKey(e => e.PlatformCode)
                    .HasName("_platform_pkey");

                entity.ToTable("Platform", "AUTH");

                entity.Property(e => e.PlatformCode).HasMaxLength(10);

                entity.Property(e => e.IsValid).HasMaxLength(1);

                entity.Property(e => e.PlatformDesc)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RefreshToken>(entity =>
            {
                entity.ToTable("RefreshToken", "AUTH");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.AccessToken).IsRequired();

                entity.Property(e => e.ExpiresDate).HasColumnType("timestamp(0) without time zone");

                entity.Property(e => e.IssuedDate).HasColumnType("timestamp(0) without time zone");

                entity.Property(e => e.ProtectedTicket).IsRequired();

                entity.Property(e => e.RefreshTokenId)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.UserId).HasColumnName("User_Id");
            });

            modelBuilder.Entity<StdCodes>(entity =>
            {
                entity.HasKey(e => new { e.CodeGroup, e.Code })
                    .HasName("stdcodes_pkey");

                entity.ToTable("StdCodes", "AUTH");

                entity.Property(e => e.CodeGroup).HasMaxLength(20);

                entity.Property(e => e.Code).HasMaxLength(20);

                entity.Property(e => e.CodeDesc).HasMaxLength(30);

                entity.Property(e => e.CodeVariant).HasMaxLength(50);

                entity.Property(e => e.IsValid)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("1");
            });

            modelBuilder.Entity<Systems>(entity =>
            {
                entity.HasKey(e => e.SystemCode)
                    .HasName("_system_pkey");

                entity.ToTable("Systems", "AUTH");

                entity.Property(e => e.SystemCode).HasMaxLength(10);

                entity.Property(e => e.IsValid)
                    .HasMaxLength(1)
                    .HasDefaultValueSql("1");

                entity.Property(e => e.PlatformCode).HasMaxLength(10);

                entity.Property(e => e.SystemDesc)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.PlatformCodeNavigation)
                    .WithMany(p => p.Systems)
                    .HasForeignKey(d => d.PlatformCode)
                    .HasConstraintName("_System_PlatformCode_fkey");
            });

            modelBuilder.Entity<User2Company>(entity =>
            {
                entity.ToTable("User2Company", "AUTH");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .UseIdentityAlwaysColumn();

                entity.Property(e => e.CompanyId).HasColumnName("company_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<User2Group>(entity =>
            {
                entity.ToTable("User2Group", "AUTH");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.GroupId).HasColumnName("Group_Id");

                entity.Property(e => e.UserId).HasColumnName("User_Id");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.User2Group)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("user2group_group_id_fkey");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.User2Group)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("user2group_user_id_fkey");
            });

            modelBuilder.Entity<UserDetail>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("userdetail_pkey");

                entity.ToTable("UserDetail", "AUTH");

                entity.Property(e => e.UserId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("User_Id")
                    .UseIdentityAlwaysColumn();

                entity.Property(e => e.CreateDate)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.Gender).HasMaxLength(10);

                entity.Property(e => e.ProfilePhoto).HasMaxLength(300);

                entity.Property(e => e.UpdateDate).HasColumnType("timestamp(0) without time zone");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.UserDetail)
                    .HasForeignKey<UserDetail>(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("userdetail_user_id_fkey");
            });

            modelBuilder.Entity<UserLogin>(entity =>
            {
                entity.ToTable("UserLogin", "AUTH");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.ClientInfo).HasMaxLength(200);

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IpAddress).HasMaxLength(20);

                entity.Property(e => e.SystemCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.UserId).HasColumnName("User_Id");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.ToTable("Users", "AUTH");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.CreateDate)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FailedCountLogin).HasDefaultValueSql("0");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IsValid).HasMaxLength(1);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LoginId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MobileNo).HasMaxLength(20);

                entity.Property(e => e.Pwd)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("PWD");

                entity.Property(e => e.RegType).HasMaxLength(20);

                entity.Property(e => e.UpdateDate).HasColumnType("timestamp(0) without time zone");

                entity.Property(e => e.VerifyGuiId).HasMaxLength(255);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}